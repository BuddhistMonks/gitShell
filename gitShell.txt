
Git命令
来源：
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
1.创建空文件夹：$mkdir 
2.创建文件：$touch 
3.打开进入文件 $cd
4.显示文件目录 $ls -ah(包含显示隐藏文件)或 $pwd
5.初始化仓库：$git init
6.把文件添加到暂存区：$git add /$git add --all 
7.暂存区文件提交到master并注释: $git commit -m 
8.查看工作区状态：$git status
9.查看修改内容：$git diff
10.查看日志：$git log
$git log --pretty=oneline：简化输出信息
11.查看命令日志：$git reflog
12.查看文件内容，创建文件，文件合并，追加文件内容：cat:
cat f1.txt，查看f1.txt文件的内容。
cat -n f1.txt，查看f1.txt文件的内容，并且由1开始对所有输出行进行编号。
cat -b f1.txt，查看f1.txt文件的内容，用法与-n相似，只不过对于空白行不编号。
cat -s f1.txt，当遇到有连续两行或两行以上的空白行，就代换为一行的空白行。
cat -e f1.txt，在输出内容的每一行后面加一个$符号
cat f1.txt f2.txt，同时显示f1.txt和f2.txt文件内容，注意文件名之间以空格分隔，而不是逗号。
cat -n f1.txt>f2.txt，对f1.txt文件中每一行加上行号后然后写入到f2.txt中，会覆盖原来的内容，文件不存在则创建它。
cat -n f1.txt>f2.txt，对f1.txt文件中每一行加上行号后然后写入到f2.txt中，会覆盖原来的内容，文件不存在则创建它。
13.当前版本：HEAD
上一个版本：HEAD^
上上一个版本：HEAD^^
前一百个版本：HEAD~100
14.恢复文件: $git reset ID
15.强制恢复到某一版本：$git reset --hard 
(只保留当前版本或之前commit的文件，版本之后add到暂存区以及commit到master的文件全部销毁)
16.强制恢复某一版本之后，拯救：(https://www.tuicool.com/articles/mqm2uiF)
find .git/objects -type f | xargs ls -lt | sed 60q
git cat-file -p ID > a.md (将ID所示的文件读取出来重定向保存到 a.md 文件内)
恢复任何被$git reset --hard销毁，add过的文件：
https://www.cnblogs.com/hope-markup/p/6683522.html
17.查看工作区和版本库里面最新版本的区别：git diff HEAD -- readme.txt
18.把readme.txt文件在工作区的修改全部撤销：$git checkout -- readme.txt
一种是：readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是:readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
说明：git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
19.把暂存区的修改撤销掉（unstage），重新放回工作区：$git reset HEAD file
说明：git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
20.本地删除文件：$rm test.txt
21.从版本库中删除该文件:$git rm test.txt , $git commit -m 
22.版本库里的版本替换工作区的版本: $git checkout -- readme.txt
23.git的远程仓库:GitHub提供Git仓库托管服务
本地Git仓库和GitHub仓库之间的传输是通过SSH加密:
1.创建SSH Key: $ ssh-keygen -t rsa -C "youremail@example.com"  一路回车，使用默认

C:\Users\Administrator\.ssh中找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
2.登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
24.添加远程库：
1.从本地库->远程库
GitHub操作
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：


在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：

目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
在本地的learngit仓库下运行命令：
git remote add origin git@github.com:BuddhistMonks/learngit.git
git push -u origin master

从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master
把本地master分支的最新修改推送至GitHub
*SSH警告：
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

这是因为SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。
2.从远程库克隆到本地库
1.登录GitHub,创建一个新仓库，名字叫gitskills,同时可以勾选readme.txt
2.本地输入命令：
$git clone git@github.com:BuddhishMonks/gitskills.git

注：Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

25.删除仓库
https://www.cnblogs.com/forget406/p/6045213.html



26.分支管理
解决问题：假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
1.创建dev分支，然后切换到dev:
$git checkout -b dev

git checkout命令加上-b参数表示:创建并切换，相当于以下两条命令：
$git branch dev
$git checkout dev
2.查看当前分支：
$git branch

git branch命令会列出所有分支，当前分支前面会标一个*号。
3.切换回master分支：
$git checkout master

4.把dev分支的工作成果合并到master分支：
$git merge dev

“快进模式”：Fast-forward，也就是直接把master指向dev的当前提交
5.合并完成后，删除dev分支:
$git branch -d dev


6.删除后，查看branch

小结：

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
27.解决分支冲突：
当分支与origin master 对相同文件都进行了修改，合并分支时，会提示冲突。只有解决了冲突，才可以合并
例：
创建feature1分支，并对readme.txt文件进行了修改，并提交到feature1分支仓库。

而origin master文件同时也修改了readme.txt文件，并提交

然后将feature1分支合并到master中

会报冲突错误。

打开readme.txt可以看到冲突内容，

也可用$ git log --graph --pretty=oneline --abbrev-commit 查看冲突内容。
手动修改后，重新上传，解决冲突


分支合并图：git log --graph

28.普通模式合并：$ git merge --no-ff -m "merge with no-ff" dev
-m:对这次合并进行注释解释
优点：会有合并历史记录，而fast forward没有合并历史记录
29.分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
所以，团队合作的分支看起来就像这样：

30.将当前工作现场存储：$git stash
查看工作现场存放地方：$git stash list
恢复工作现场：1.恢复：git stash apply 删除存储：git stash drop 
2.恢复的同时把stash内容也删了：git stash pop
小结：

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场


31.强行删除未合并的分支：git branch -D <name>
32.查看远程库的信息：git remote

查看更详细的信息：


上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
33.推送分支：
$git push origin master
$git push origin dev
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug。
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
34.标签管理
标签：指向某个commit的指针，他跟commit绑在一起
1.创建标签
$git tag v1.0 
默认打在最新提交的commit上。
2.查看所有标签:(标签不是按时间顺序列出，而是按字母排序的)
$git tag

3.历史标签：
1.找到历史commit的id :git log --pretty=oneline --abbrev-commit
2.然后 $git tag v0.9 ID


4.查看标签详细信息：git show <tagname>


5.创建带有说明的标签
用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" ID


6.用PGP签名标签
注：签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或		者没有gpg密钥对，就会报错
$git tag -s v0.2 -m “******” ID


查看PGP签名信息：git show <tagname>
7.删除本地标签:$ git tag -d v0.1

8.推送某个标签到远程：$ git push origin <tagname>

推送全部本地标签到远程：
$ git push origin --tags

9.删除推送到远程的标签：
第一步：删除本地标签:$ git tag -d v0.3

第二步：删除远程：$ git push origin :refs/tags/v0.9    

总结：

35.使用码云：
国内的Git托管服务：码云（gitee.com）.
码云：1.集成代码质量检测、项目演示等
2.团队协作：项目管理、代码托管、文档管理
1.注册码云：
访问 https://gitee.com
添加SSH公钥匙




2.把本地库关联到码云远程库上
首先：在码云上创建一个新的项目，选择右上角用户头像->菜单“控制面板”，然后点击“创建项目”（项目名称最好与本地库保持一致）：





36.自定义git
1.Git显示颜色: $git config --global color.ui true

37.忽略特殊文件：
在git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
.gitignore文件，github已准备好各种配置文件，只需要组合一下。配置文件地址：
https://github.com/github/gitignore

忽略文件的原则是：
1.忽略操作系统自动生成的文件，比如缩略图等；
2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean。

使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。

有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：


38.配置别名：
st表示status : $git config --global alias.st status
co表示checkout: $git config --global alias.ci commit
ci表示commit: $git config --global alias.br branch
unstage表示reset HEAD: $git config --global alias.unstage ‘reset HEAD’
git last 表示 最后一次提交信息：$git config --global alias.last ‘log -1’
Lg：$git config --global alias.lg “log --color --graph --pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset’--abbrev-commit”

说明：
global参数是全局参数（命令在这台电脑的所有Git仓库下都有用）
位置：Git配置文件都放在.git/config文件

删除别名：别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
39.搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian,这样，通过几条简单的apt就可以完成安装。
假设你已经有sudo权限的用户账户，下面开始安装。
第一步，安装git:
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git
第三步，创建证书登录
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git,在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git:
$ sudo chown -R git:git sample.git
第五步，禁用shell登录：
处于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git,但无法登录shell,因为我们为git用户指定的git-shell每次一登录就自动退出。
第六步，克隆远程仓库：
现在，可以通过git clone 命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.gitCloning into 'sample'...warning: You appear to have cloned an empty repository.
搭建Git服务器

阅读: 594746
在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。

GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。

搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：

$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥

如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限

有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

小结

搭建Git服务器非常简单，通常10分钟即可完成；

要方便管理公钥，用Gitosis；

要像SVN那样变态地控制权限，用Gitolite。























